#+TITLE: The Analytics REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API for analyticsc
  virtual-labs


* REST API implementation

** Get open edx labs usage

   - Currently 91 number of labs are running on openedx platform.
   - When user clicks on =simulation= section of an experiment 1 usage is added
     to elastic search database.
   - This API return total number open edx labs usages
   - This API makes a internal get request to Elasticsearch and gets the total
     number of analytics record holded.

*** API Design

  :PROPERTIES:
  :CUSTOM_ID: openedx-usage
  :END:          

    - URL :: /api/elkusage

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
'count': 7827, 
'_shards': {'successful': 5, 'failed': 0, 'total': 5}
}   
#+END_EXAMPLE

**** TODO
   This response template has to be changed and below response is integrated to
   vlabs.ac.in page
*** Implementation
#+NAME: get_elkusage
#+BEGIN_SRC python

@api.route('/api/elkusage')
def get_elkusage():
    try:
        res = requests.get(elk_count_url)
        elk_response = ast.literal_eval(res.text)
        return json.dumps(elk_response)
    except:
        return "Error in communication"

#+END_SRC 
*** Test Cases
#+NAME: test_get_elkusage
#+BEGIN_SRC python
class TestELKUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_elk_usage(self):
	print "test_elk_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/get_elkusage")
	self.assertEqual(response.status_code, 200)

#+END_SRC



** Fetch analytics 
   + Route/API to fetch analytics from Open edX.  OpenedX POSTs data
     to analytics server API. Data POSTed is in the url.  
   + Analytics server further converts that data into JSON and sends POST it to
     Elasticsearch database.
   + IP address of the Client making the request is evaluated by
     Analytics server.
   + Location of the Client is idenfied using an available opensource API 
     http://freegeoip.net/json/ 
**** TODO
     This API is badly implemented this is to be refactored. This is already
     integrated to 91 number labs in openedx hence not possible to break all
     such apis by refactoring it.
     
*** API Design
   :PROPERTIES:
   :CUSTOM_ID: openedx-usage
   :END:          

    - URL :: /server_url,user_id,lab_id,lab_name,exp_id,exp_name

    - Method :: POST

    - URL Params :: None

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
    "DATE_OF_EXPERIMENT": "30-8-2016",
    "LAB_NAME": "PopulationEcologyII",
    "EXPERIMENT_NAME": "OptimalforagingSitAndWaitPredators",
    "TIME_OF_EXPERIMENT": "19:49",
    "COURSE_ID": "blockv1UniversityYPS01Anytime",
    "IP_ADDRESS": "196.12.53.130"
    "Location" : "Telengana"
}
#+END_EXAMPLE

*** Implementation
#+NAME: get_analytics
#+BEGIN_SRC python

@api.route('/<analytics>',methods= ['GET','POST'])
def fetch_analytics(analytics):
        data = request.data
        fetch_data = analytics
        data_list = fetch_data.split(",")
        data_dict = {}
        today = str(datetime.date.today())
        data_dict["STUDENT_ID"] = data_list[0]
        data_dict["LAB_ID"] = data_list[1]
        data_dict["LAB_NAME"] = data_list[2]
        data_dict["EXPERIMENT_ID"] = data_list[3]
        data_dict["EXPERIMENT_NAME"] = data_list[4]
        data_dict["DATE_OF_EXPERIMENT"] = today
        data_dict["TIME_OF_EXPERIMENT"] = time.strftime("%H:%M")
        data_dict["IP_ADDRESS"] = request.environ.get('HTTP_X_REAL_IP',\
                                                      request.remote_addr)

        res = requests.get("http://freegeoip.net/json/" + \
                           data_dict["IP_ADDRESS"])
        data = res.text
        ip_dir = ast.literal_eval(data)
        data_dict["REGION"] = ip_dir["region_name"]

        json_data = json.dumps(data_dict)
        res = requests.post(elk_url, data=json_data, headers=headers)

        return "".format(analyti)

 #+END_SRC
*** Test Cases
#+NAME: test_post_analytics
#+BEGIN_SRC python
class TestPostAnalytics(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_post_analytics(self):
	print "test_post_analytics"

	headers = {'Content-Type': 'application/json'}
	payload = {
        "lab_id" : "cse04",
        "lab_name" : "computer programming language"
        }
    response = self.client.post("/lab_name,lab_id", data=json.dumps(payload),
                                headers=headers)
    self.assertEqual(response.status_code, 200)

#+END_SRC


** Lab wise analytics
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: lab_wise_analytics
  :END:          

    - URL :: /analytics/labs

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   [
   {"lab_id": "ccnsb04", 
   "hits": 30485, 
   "institute_name": "IIIT-H", 
   "visits": 6430, 
   "lab_name": "Quantum Chemistry", 
   "usage": 473}, 
   {"lab_id": "cse05", 
   "hits": 21882, 
   "institute_name": "IIIT-H", 
   "visits": 11470, 
   "lab_name": "Principles of Programming Languages", 
   "usage": 1314}......and so on
   ]
   
#+END_EXAMPLE

*** Implementation

#+NAME: get_lab_wise_usageo
#+BEGIN_SRC python

@api.route('/analytics/labs')
#@api.cache.cached(timeout=360)
def lab_wise_total():
    files_dir = "/var/www/html/analytics/"
    result_file = files_dir+"output.txt"
    rows = []
    lab=[]
    with open(result_file, 'r') as f:
      lines = f.readlines()
      for line in lines:
         d={}
         row = line.split(",")
         if len(row)>0:
                d["lab_id"]= row[0]
                d["lab_name"]=row[1]
                d["institute_name"]=row[2]
                d["hits"]=int(row[3])
                d["visits"]=int(row[4])
                d["usage"]=int(row[5].strip())
                lab.append(d)
         else:
                break

    response = make_response(json.dumps(lab))
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response

#+END_SRC

*** Test Cases

    
** Total analytics
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_analytics
  :END:          

    - URL :: /analytics

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   {
  "hits": 40115823, 
  "usage": 593854, 
  "visits": 9704325
  }

#+END_EXAMPLE

*** Implementation
    get the total visits from the =all_total.txt= file

#+NAME: get_analytics
#+BEGIN_SRC python

#app.cache = Cache(app)
@api.route('/analytics')
#@api.cache.cached(timeout=360)
def total_hits():
    files_dir = "/var/www/html/analytics/"
    result_file = files_dir+"all_total.txt"
    with open(result_file, 'r') as f:
      lines = f.read()
      words = lines.split()
    d = {}
    d["hits"] = int (words[0])
    d["visits"]=int (words[1])
    d["usage"]=int (words[2])
    hits = jsonify(d)
#+END_SRC

*** Test Cases


** Get total analytics Count
   This API returns total usage of labs running on openedx (i.e 91) and non
   openedx labs
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_opendx_analytics
  :END:          

    - URL :: /api/totalusage

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   {
  "hits": 40115823, 
  "usage": 593854, 
  "visits": 9704325
  }

#+END_EXAMPLE

   + Total Analytics = Usage(stats.vlabs.ac.in) + Usage(vlabs-analytics.vlabs.ac.in)
*** Implementation
#+NAME: get_total_usage
#+BEGIN_SRC python

@api.route('/api/totalusage')
def get_total_usage():
    try:
        res = requests.get(elk_count_url)
        elk_response = json.loads(res.content)
        req = requests.get(stats_server_url)
        stats_response = json.loads(req.content)
        total_analytics = {}
        total_analytics["description"] = "Total analytics = Usage(stats.vlabs.ac.in/analytics/) + Usage(Elasticsearch Server)"
        total_analytics["total_usage"] = elk_response["count"] + stats_response["usage"]
        return json.dumps(total_analytics)
            
    except:
        return "Error in communication"
    
#+END_SRC 
*** Test Cases


** Get nodal centre wise usage in outreach portal
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_nc_wise_usage
  :END:    

  - URL :: /nc_wise_usage

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
  "Amrita University": {
    "nc_count": 98, 
    "usage": 236733, 
    "workshops": 103
  }, 
  "College of Engineering, Pune": {
    "nc_count": 32, 
    "usage": 12, 
    "workshops": 36
  }, 
  "DEI Dayalbagh": {
    "nc_count": 11, 
    "usage": 67300, 
    "workshops": 18
  }, 
  "IIIT Hyderabad": {
    "nc_count": 47, 
    "usage": 133549, 
    "workshops": 125
  }, 
  "IIT Bombay": {
    "nc_count": 56, 
    "usage": 321256, 
    "workshops": 577
  }, 
  "IIT Delhi": {
    "nc_count": 94, 
    "usage": 191479, 
    "workshops": 130
  }, 
  "IIT Guwahati": {
    "nc_count": 19, 
    "usage": 99100, 
    "workshops": 21
  }, 
  "IIT Kanpur": {
    "nc_count": 26, 
    "usage": 43831, 
    "workshops": 23
  }, 
  "IIT Kharagpur": {
    "nc_count": 19, 
    "usage": 269612, 
    "workshops": 86
  }, 
  "IIT Roorkee": {
    "nc_count": 44, 
    "usage": 258772, 
    "workshops": 57
  }, 
  "NITK Surathkal": {
    "nc_count": 40, 
    "usage": 124956, 
    "workshops": 67
  }, 
  "VLEAD-IIITH": {
    "nc_count": 1, 
    "usage": 0, 
    "workshops": 1
  }
}

#+END_EXAMPLE
  - Error Response ::
    + Status_Code: 404
    + Content:                 
#+BEGIN_EXAMPLE
URL not found
#+END_EXAMPLE
*** Implementation
*** Test Cases


** Get current logged in users and total registered users
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_user_in_op
  :END:    

  - URL :: /get_outreach_user_statistics

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
"current_logged_in_users" : 20,
"total_registered_users"" : 1000
}
#+END_EXAMPLE

*** Implementation
*** Test Cases


** Get total offline/online feedbacks
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_feedbacks
  :END:    

  - URL :: /get_feedbacks

  - Method :: GET

  - URL Params ::  
     + ?version=offline/online&date=dd-mm-yyyy
     + ?version=offilne/online&date=dd-mm-yyyy&mac_addr=<mac_id>
  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
"total_feedbacks" : 30 
}
#+END_EXAMPLE
*** Implementation
*** Test Cases


** Get all feedbacks =from= and =to= date
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_all_feedback_forms_for_a_date
  :END:          

    - URL :: /get_feedbakcs

    - Method :: GET

    - URL Params ::
      Required : from_date=[string]
                 to_date=[string]
      the format of the string is in 'dd-mm-yyyy' format

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
"total_feedbacks" : 1000
}
#+END_EXAMPLE

*** Implementation
*** Test Cases
   
   


* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

import os
import json
import time
import datetime
import os
from runtime.config.flask_app_config import *
from flask import send_from_directory, current_app
from flask import request, Blueprint
from elasticsearch import Elasticsearch
import requests
import ast
api = Blueprint('APIs', __name__)

#+end_src



* Tangle                                                        :boilerplate:

** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<get_analytics>>
<<get_elkusage>>
<<get_total_usage>>
<<get_lab_wise_usage>>

#+END_SRC



