#+TITLE: The Analytics REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API for analyticsc
  virtual-labs

  
* REST API implementation

** Get total usage analytics of labs running on openedx platform

   - Currently 90 labs are running on openedx platform.
   - When user clicks on =simulation= section of an experiment 1 usage calculated
   - This API return total number usage analytics of labs on openedx platform
   - This API makes a API call to get toall usage analytics of labs.

*** API Design

  :PROPERTIES:
  :CUSTOM_ID: openedx-usage
  :END:          

    - URL :: /api/elkusage

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
'count': 7827, 
'_shards': {'successful': 5, 'failed': 0, 'total': 5}
}   
#+END_EXAMPLE

**** TODO
   This response template has to be changed and below response is integrated to
   vlabs.ac.in page
*** Implementation
#+NAME: get_openedx_usage
#+BEGIN_SRC python

#@api.route('/api/elkusage', methods=['GET'])
@api.route('/openedx/usage', methods=['GET'])
def get_openedx_usage():
    if request.method == 'GET':
        index = "vlabs"
        type = "openedx_usage"
        ANALYTICS_API = "%s/%s/%s/_count" % (ANALYTICS_URL, index, type)
        try:
            res = requests.get(ANALYTICS_API)
            if res.status_code == 200:
                usage_dict = {
                    "usage" : res.json()['count']
                    }
                return jsonify(usage_dict)
            else:
                abort(res.status_code)
        except Exception as e:
            abort(res.status_code, str(e))

#+END_SRC 
*** Test Cases
#+NAME: test_get_openedx_usage
#+BEGIN_SRC python
class TestgetOpenedxUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_openedx_usage(self):
	print "test_get_openedx_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/openedx/usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC


** Get lab wise usage analytics of labs running on openedx platform
   
   - Currently 90 number of labs are running on openedx platform.
   - When user clicks on =simulation= section of an experiment 1 usage is added
     to elastic search database.
   - This API return total number open edx labs usages
   - This API makes a internal get request to Elasticsearch and gets the total
     number of analytics record holded.

*** API Design

  :PROPERTIES:
  :CUSTOM_ID: openedx-usage
  :END:          

    - URL :: /openedx/lab_wise_usage

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
'count': 7827, 
'_shards': {'successful': 5, 'failed': 0, 'total': 5}
}   
#+END_EXAMPLE

**** TODO
   This response template has to be changed and below response is integrated to
   vlabs.ac.in page
*** Implementation
#+NAME: get_openedx_lab_wise_usage
#+BEGIN_SRC python

@api.route('/openedx/lab_wise_usage', methods=['GET'])
def get_openedx_lab_wise_usage():
    if request.method == 'GET':
        headers = {'Content-Type': 'application/json'}
        data = {
            "size": 0,
            "aggs": {
                "lab_ids": {
                    "terms": {
                        "field": "lab_id",
                        "size": 0
                        }
                    }
                }
        }
        index = "vlabs"
        type = "openedx_usage"
        ANALYTICS_API = "%s/%s/%s/_search" % (ANALYTICS_URL, index, type)
        usage_list = []
        try:
            res = requests.post(ANALYTICS_API, data=json.dumps(data), headers=headers)
            if res.status_code == 200:

                labs_usage = res.json()['aggregations']['lab_ids']['buckets']

                for lab_usage in labs_usage:
                    lab_usage_dict = {}
                    lab_usage_dict['lab_id'] = str(lab_usage['key'])
                    LDS_API = "%s/labs?lab_id=%s" % (LDS_URL, lab_usage_dict['lab_id'])
                    #r = requests.get(LDS_API, headers=headers)
                    # if r.status_code == 200:
                    #     current_date = str(datetime.datetime.today()).split()[0]
                    #     lab_usage_dict['lab_name'] = str(r.json()['lab_name'])
                    #     lab_usage_dict['institute_name'] = str(r.json()['institute']['institute_name'])
                    #     lab_usage_dict['discipline_name'] = str(r.json()['discipline']['discipline_name'])
                    #     lab_usage_dict['date'] = current_date

                    lab_usage_dict['usage'] = lab_usage['doc_count']
                    usage_list.append(lab_usage_dict)
                return jsonify(usage_list)

            else:
                abort(res.status_code)
        except Exception as e:
            abort(str(e))

#+END_SRC 
*** Test Cases
#+NAME: test_get_elkusage
#+BEGIN_SRC python
class TestELKUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_elk_usage(self):
	print "test_elk_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/get_elkusage")
	self.assertEqual(response.status_code, 200)

#+END_SRC



** Add usage analytics of labs running on openedx platform

   + Route/API to fetch analytics from Open edX.  OpenedX POSTs data
     to analytics server API. Data POSTed is in the url.  
   + Analytics server further converts that data into JSON and sends POST it to
     Elasticsearch database.
   + IP address of the Client making the request is evaluated by
     Analytics server.
   + Location of the Client is idenfied using an available opensource API 
     http://freegeoip.net/json/ 
**** TODO
     This API is badly implemented this is to be refactored. This is already
     integrated to 91 number labs in openedx hence not possible to break all
     such apis by refactoring it.
     
*** API Design
   :PROPERTIES:
   :CUSTOM_ID: openedx-usage
   :END:          

    - URL :: /server_url,user_id,lab_id,lab_name,exp_id,exp_name

    - Method :: POST

    - URL Params :: None

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
    "DATE_OF_EXPERIMENT": "30-8-2016",
    "LAB_NAME": "PopulationEcologyII",
    "EXPERIMENT_NAME": "OptimalforagingSitAndWaitPredators",
    "TIME_OF_EXPERIMENT": "19:49",
    "COURSE_ID": "blockv1UniversityYPS01Anytime",
    "IP_ADDRESS": "196.12.53.130"
    "Location" : "Telengana"
}
#+END_EXAMPLE

*** Implementation
#+NAME: add_openedx_usage_analytics
#+BEGIN_SRC python

@api.route('/<analytics>',methods= ['GET','POST'])
def add_openedx_usage_analytics(analytics):
    data = request.data
    fetch_data = analytics
    data_list = fetch_data.split(",")
    data_dict = {}
    today = str(datetime.datetime.today()).split()[0]
    data_dict["student_id"] = data_list[0]
    data_dict["lab_id"] = data_list[1].lower()
    LDS_API = "%s/labs?lab_id=%s" % (LDS_URL, data_dict['lab_id'])
    r = requests.get(LDS_API)
    if r.status_code == 200:
        data_dict["lab_name"] = r.json()['lab_name']
    else:
        data_dict["lab_name"] = data_list[2]
    data_dict["experiment_id"] = data_list[3].lower()
    LDS_API = "%s/experiments?exp_id=%s" % (LDS_URL, data_dict['experiment_id'])
    r = requests.get(LDS_API)
    if r.status_code == 200:
        data_dict["experiment_name"] = r.json()['exp_name']
    else:
        data_dict["experiment_name"] = data_list[4]
    data_dict["date_of_experiment"] = today
    data_dict["time_of_experiment"] = time.strftime("%H:%M")
    data_dict["ip_address"] = request.environ.get('HTTP_X_REAL_IP',\
                                                  request.remote_addr)

    res = requests.get("http://freegeoip.net/json/" + \
                       data_dict["ip_address"])
    data = res.text
    ip_dir = ast.literal_eval(data)
    data_dict["region"] = ip_dir["region_name"]

    json_data = json.dumps(data_dict)
    headers = {'Content-Type': 'application/json'}
    index = "vlabs"
    type = "openedx_usage"
    ANALYTICS_API = "%s/%s/%s" % (ANALYTICS_URL, index, type)
    res = requests.post(ANALYTICS_API, data=json_data, headers=headers)
    if res.status_code == 200 or res.status_code == 201:
        return "success"
    else:
        return "failed"

 #+END_SRC
*** Test Cases
#+NAME: test_post_analytics
#+BEGIN_SRC python
class TestPostAnalytics(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_post_analytics(self):
	print "test_post_analytics"

	headers = {'Content-Type': 'application/json'}
	payload = {
        "lab_id" : "cse04",
        "lab_name" : "computer programming language"
        }
    response = self.client.post("/lab_name,lab_id", data=json.dumps(payload),
                                headers=headers)
    self.assertEqual(response.status_code, 200)

#+END_SRC


** Add nonopnedx lab wise usage to database 

#+NAME: add_nonopenedx_lab_wise_usage
#+BEGIN_SRC python

    if request.method == 'POST':
        files_dir = "/home/sripathi/"
        result_file = files_dir + "output.txt"
        rows = []
        with open(result_file, 'r') as f:
          lines = f.readlines()
          for line in lines:
             d = {}
             row = line.split(",")
             if len(row)>0:
                 d["lab_id"] = row[0]
                 d["lab_name"] = row[1]
                 d["institute_name"] = row[2]
                 d["hits"] = int(row[3])
                 d["visits"] = int(row[4])
                 d["usage"] = int(row[5].strip())
                 d["date"] = current_date
                 lab_id = d['lab_id']
                 current_app.logger.debug("Before LDS call record is =%s" % (d))
                 LDS_API = "%s/labs?lab_id=%s" % (LDS_URL, lab_id)
                 req = requests.get(LDS_API)
                 if req.status_code == 200:
                     d["lab_name"] = str(req.json()["lab_name"])
                     d["institute_name"] = str(req.json()["institute"]["institute_name"])
                     d["discipline_name"] = str(req.json()["discipline"]["discipline_name"])
                 ANALYTICS_API = "%s/%s/%s/id=%s_%s" % (ANALYTICS_URL, index, type, lab_id, current_date)
                 current_app.logger.debug("ANALYTICS_API=%s" % (ANALYTICS_API))
                 current_app.logger.debug("After LDS record=%s" % (d))
                 req = requests.post(ANALYTICS_API, data=json.dumps(d))
                 if req.status_code == 200 or req.status_code == 201:
                     current_app.logger.debug("Added record %s" % (d))
                 else:
                     current_app.logger.error("Failed to add record %s" % (d))
                     
             else:
                 break
        return "ok"
        # response = make_response(json.dumps(lab))
        # response.headers['Access-Control-Allow-Origin'] = '*'
        # response.headers['Access-Control-Allow-Credentials'] = 'true'
        # return response

#+END_SRC

*** Test Cases


** Get lab wise usage analytics of labs running on non-openedx platform 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: lab_wise_analytics
  :END:          

    - URL :: /analytics/labs

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   [
   {"lab_id": "ccnsb04", 
   "hits": 30485, 
   "institute_name": "IIIT-H", 
   "visits": 6430, 
   "lab_name": "Quantum Chemistry", 
   "usage": 473}, 
   {"lab_id": "cse05", 
   "hits": 21882, 
   "institute_name": "IIIT-H", 
   "visits": 11470, 
   "lab_name": "Principles of Programming Languages", 
   "usage": 1314}......and so on
   ]
   
#+END_EXAMPLE

*** Implementation

#+NAME: get_nonopenedx_lab_wise_usage
#+BEGIN_SRC python

#@api.route('/analytics/labs', methods=['POST', 'GET'])
@api.route('/nonopenedx/lab_wise_usage', methods=['POST', 'GET'])
#@api.cache.cached(timeout=360)
def nonopenedx_lab_wise_usage():
    index = "vlabs"
    type = "nonopenedx_usage"    
    
    if request.method == 'GET':
        if 'date' in request.args:
            current_date = request.args['date']
        else:
            current_date = str(datetime.datetime.today()).split()[0]

        total_labs = []
        ANALYTICS_API = "%s/%s/%s/_search?q=date:%s&size=1000" % (ANALYTICS_URL, index, type, current_date)
        req = requests.get(ANALYTICS_API)
        if req.status_code == 200:
            labs = req.json()['hits']['hits']
            for lab in labs:
                total_labs.append(lab['_source'])
        response = make_response(json.dumps(total_labs))
        return jsonify(total_labs)
#+END_SRC

    
** Get total usage analytics of labs running on non-openedx platform
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_analytics
  :END:          

    - URL :: /analytics

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   {
  "hits": 40115823, 
  "usage": 593854, 
  "visits": 9704325
  }

#+END_EXAMPLE

*** Implementation
    get the total visits from the =all_total.txt= file

#+NAME: get_nonopenedx_usage
#+BEGIN_SRC python

#app.cache = Cache(app)
#@api.route('/analytics', methods=['POST', 'GET'])
@api.route('/nonopenedx/usage', methods=['POST', 'GET'])
#@api.cache.cached(timeout=360)
def total_hits():
    index = "vlabs"
    type = "nonopenedx_usage"    
    
    if request.method == 'GET':
        if 'date' in request.args:
            current_date = request.args['date']
        else:
            current_date = str(datetime.datetime.today()).split()[0]

        ANALYTICS_API = "%s/%s/%s/_search?q=date:%s&size=1000" % (ANALYTICS_URL, index, type, current_date)
        req = requests.get(ANALYTICS_API)
        if req.status_code == 200:
            labs = req.json()['hits']['hits']
            print labs, len(labs)
            visits = 0
            hits = 0
            usage = 0
            if len(labs) != 0:
                for lab in labs:
                    visits = visits + int(lab['_source']['visits'])
                    hits = hits + int(lab['_source']['hits'])
                    usage = usage + int(lab['_source']['usage'])
                analytics_data = {"visits" : visits, "hits" : hits, "usage" : usage, "date" : current_date}
            else:
                analytics_data = {}

        return jsonify(analytics_data)
        
#+END_SRC

*** Test Cases


** Get total analytics of vlabs (openedx+nonopenedx)
   This API returns total usage of labs running on openedx (i.e 90) and non
   openedx labs
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_opendx_analytics
  :END:          

    - URL :: /api/totalusage

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
   {
  "hits": 40115823, 
  "usage": 593854, 
  "visits": 9704325
  }

#+END_EXAMPLE

   + Total Analytics = Usage(stats.vlabs.ac.in) + Usage(vlabs-analytics.vlabs.ac.in)
*** Implementation
#+NAME: get_vlabs_usage
#+BEGIN_SRC python

#@api.route('/api/totalusage')
@api.route('/vlabs/usage')
def get_vlabs_usage():
    if request.method == 'GET':
        index = "vlabs"
        openedx_usage_type = "openedx_usage"
        nonopenedx_usage_type = "nonopenedx_usage"
        ANALYTICS_API_FOR_EDX_USAGE = "%s/%s/%s/_count" % (ANALYTICS_URL, index, openedx_usage_type)
        ANALYTICS_API_FOR_NONEDX_USAGE = "%s/%s/%s/_count" % (ANALYTICS_URL, index, nonopenedx_usage_type)
        print ANALYTICS_API_FOR_EDX_USAGE
        print ANALYTICS_API_FOR_NONEDX_USAGE
        try:
            headers = {'Content-Type': 'application/json'}
            r = requests.get(ANALYTICS_API_FOR_EDX_USAGE, headers=headers)
            if r.status_code == 200:
                openedx_usage = r.json()['count']
            r = requests.get(ANALYTICS_API_FOR_NONEDX_USAGE, headers=headers)
            if r.status_code == 200:
                nonopenedx_usage = r.json()['count']
            vlabs_usage = openedx_usage + nonopenedx_usage
            return jsonify({"usage" : vlabs_usage})
        except Exception as e:
            abort(str(e))
    
#+END_SRC 
*** Test Cases


** Get nodal centre wise usage in outreach portal
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_nc_wise_usage
  :END:    

  - URL :: /nc_wise_usage

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
  "Amrita University": {
    "nc_count": 98, 
    "usage": 236733, 
    "workshops": 103
  }, 
  "College of Engineering, Pune": {
    "nc_count": 32, 
    "usage": 12, 
    "workshops": 36
  }, 
  "DEI Dayalbagh": {
    "nc_count": 11, 
    "usage": 67300, 
    "workshops": 18
  }, 
  "IIIT Hyderabad": {
    "nc_count": 47, 
    "usage": 133549, 
    "workshops": 125
  }, 
  "IIT Bombay": {
    "nc_count": 56, 
    "usage": 321256, 
    "workshops": 577
  }, 
  "IIT Delhi": {
    "nc_count": 94, 
    "usage": 191479, 
    "workshops": 130
  }, 
  "IIT Guwahati": {
    "nc_count": 19, 
    "usage": 99100, 
    "workshops": 21
  }, 
  "IIT Kanpur": {
    "nc_count": 26, 
    "usage": 43831, 
    "workshops": 23
  }, 
  "IIT Kharagpur": {
    "nc_count": 19, 
    "usage": 269612, 
    "workshops": 86
  }, 
  "IIT Roorkee": {
    "nc_count": 44, 
    "usage": 258772, 
    "workshops": 57
  }, 
  "NITK Surathkal": {
    "nc_count": 40, 
    "usage": 124956, 
    "workshops": 67
  }, 
  "VLEAD-IIITH": {
    "nc_count": 1, 
    "usage": 0, 
    "workshops": 1
  }
}

#+END_EXAMPLE
  - Error Response ::
    + Status_Code: 404
    + Content:                 
#+BEGIN_EXAMPLE
URL not found
#+END_EXAMPLE
*** Implementation
*** Test Cases


** Get current logged in users and total registered users
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_user_in_op
  :END:    

  - URL :: /get_outreach_user_statistics

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
"current_logged_in_users" : 20,
"total_registered_users"" : 1000
}
#+END_EXAMPLE

*** Implementation
*** Test Cases


** Get total offline/online feedbacks
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_feedbacks
  :END:    

  - URL :: /get_feedbacks

  - Method :: GET

  - URL Params ::  
     + ?version=offline/online&date=dd-mm-yyyy
     + ?version=offilne/online&date=dd-mm-yyyy&mac_addr=<mac_id>
  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
#+BEGIN_EXAMPLE
{
"total_feedbacks" : 30 
}
#+END_EXAMPLE
*** Implementation
*** Test Cases

    
** Get all feedbacks =from= and =to= date
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_all_feedback_forms_for_a_date
  :END:          

    - URL :: /get_feedbakcs

    - Method :: GET

    - URL Params ::
      Required : from_date=[string]
                 to_date=[string]
      the format of the string is in 'dd-mm-yyyy' format

    - Success Response ::
      + Code: 200
#+BEGIN_EXAMPLE
{
"total_feedbacks" : 1000
}
#+END_EXAMPLE

*** Implementation
*** Test Cases
   
   


* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

import os
import json
import time
import datetime
import os
import datetime
from runtime.config.system_config import *
from runtime.config.flask_app_config import *
from flask import send_from_directory, current_app, abort
from flask import request, Blueprint, make_response, jsonify
#from elasticsearch import Elasticsearch
import requests
import ast
api = Blueprint('APIs', __name__)

#+end_src



* Tangle                                                        :boilerplate:

** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_sources>>
<<get_analytics>>
<<get_openedx_usage>>
<<add_openedx_usage_analytics>>
<<get_openedx_lab_wise_usage>>
<<get_nonopenedx_usage>>
<<add_nonopenedx_lab_wise_usage>>
<<get_nonopenedx_lab_wise_usage>>
<<get_vlabs_usage>>



#+END_SRC



