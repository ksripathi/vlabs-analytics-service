#+TITLE: Virtual Labs Analytics Service REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates building of the REST API service for Virtual Labs
  analytics

  
* REST API implementation
  
** Get total usage analytics of labs running on openedx platform

   1. As of date =2017-Sep-08= total labs hosted on openedx platform are =90=

   2. Usage for labs hosted on openedx platform is calculated as follows
      - When user click on =simulation= section of an experiment results +1
        usage
   3. This API returns total usage count of all labs hosted on openedx platform
      from the date =2016-10-07=

*** API Design

  :PROPERTIES:
  :CUSTOM_ID: openedx-usage
  :END:          

    - URL :: /openedx/usage

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
        #+BEGIN_EXAMPLE
        {
        'usage': 7827,
        'date' : 2017-08-29
        }   
#+END_EXAMPLE

**** TODO
   This response template has to be changed and below response is integrated to
   vlabs.ac.in page
*** Implementation
#+NAME: get_openedx_usage
#+BEGIN_SRC python

#@api.route('/api/elkusage', methods=['GET'])
@api.route('/openedx/usage', methods=['GET'])
def get_openedx_usage():
    if request.method == 'GET':
        index = VLABS_INDEX
        type = OPENEDX_USAGE
        ANALYTICS_DB_API = "%s/%s/%s/_count" % (ANALYTICS_DB_URL, index, type)
        try:
            res = requests.get(ANALYTICS_DB_API)
            if res.status_code == 200:
                usage_dict = {
                    "usage" : res.json()['count']
                    }
                current_app.logger.debug("Openedx Usage = %s" % (usage_dict))
                return jsonify(usage_dict)
            else:
                status_code = res.status_code
                current_app.logger.error("Error code = %s" % (status_code))
                abort(status_code)
        except Exception as e:
            current_app.logger.error("Exception error = %s" % str(e))
            abort(500, str(e))

    else:
        return "Method not allowed"
#+END_SRC 
*** Test Cases
#+NAME: test_get_openedx_usage
#+BEGIN_SRC python
class TestgetOpenedxUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_openedx_usage(self):
	print "test_get_openedx_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/openedx/usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC


** Get lab wise usage analytics of labs running on openedx platform
   
   - Currently 90 number of labs are hosted on openedx platform.
   - When user clicks on =simulation= section of an experiment 1 usage is added
     to elastic search database.
   - This API return total number open edx labs usages
   - This API makes a internal get request to Elasticsearch and gets the total
     number of analytics record holded.
   - Query to get the lab-wise usage of openedx platform
    #+BEGIN_EXAMPLE
    {
    "aggs": {
        "lab_ids": {
            "terms": {
                       "field": "lab_id",
                       "order" : { "_count" : "desc" },
                   "size": 0
                },

          "aggs": {
            "total_value": {
            "terms": {
            "script": "[doc.lab_id.value, doc.lab_name.value, doc.discipline_name.value, doc.institute_name.value].join('::')"
          }

            }
          }
        }
      }
     }

    #+END_EXAMPLE

*** API Design

  :PROPERTIES:
  :CUSTOM_ID: openedx-usage
  :END:          

    - URL :: /openedx/lab_wise_usage

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
      #+BEGIN_EXAMPLE
       [
        {
          "lab_id": "ccnsb04",
          "institute_name": "IIIT-H",
          "institute_id": "iiith",
          "discipline_name": "Computer Science & Engeering",
          "discipline_id": "cse",
          "lab_name": "Quantum Chemistry",
          "usage": 473
        }
      ]
      #+END_EXAMPLE

**** TODO
   This response template has to be changed and below response is integrated to
   vlabs.ac.in page
*** Implementation
#+NAME: get_openedx_lab_wise_usage
#+BEGIN_SRC python

@api.route('/<entity>/openedx', methods=['GET'])
def get_openedx_lab_wise_usage(entity):

    if request.method == 'GET':
        
        if entity == "labs":
            field = "lab_id"
            script = "[doc.lab_id.value, doc.lab_name.value, doc.discipline_name.value, doc.institute_name.value].join('::')"
            
        elif entity == "institutes":
            field = "institute_id"
            script = "[doc.institute_id.value, doc.institute_name.value].join('::')"
            
        elif entity == "disciplines":
            field = "discipline_id"
            script = "[doc.discipline_id.value, doc.discipline_name.value, doc.institute_name.value].join('::')"
        else:
            abort(500, "invalid query")
        
        if "top" in request.args:
            size = int(request.args.get("top"))
        else:
            size = 0

        headers = {'Content-Type': 'application/json'}
        data =  {
            "aggs": {
                "entity": {
                    "terms": {
                        "field": field,
                        "order" : { "_count" : "desc" },
                        "size": size
                        },            
                        "aggs": {
                            "entity_details": {
                            "terms": {
                                "script": script
                            }
                        
                        }
                    }
                }
            }
        }
            
        index = VLABS_INDEX
        type = OPENEDX_USAGE
        ANALYTICS_DB_API = "%s/%s/%s/_search" % (ANALYTICS_DB_URL, index, type)
        usage_list = []
        try:
            res = requests.post(ANALYTICS_DB_API, auth=(USER, PASSWORD),\
                                data=json.dumps(data), headers=headers)
            if res.status_code == 200:

                entity_usages = res.json()['aggregations']['entity']['buckets']

                for entity_usage in entity_usages:
                    entity_usage_dict = {}
                    entity_usage_dict[field] = str(entity_usage['key'])
                    entity_details = entity_usage['entity_details']\
                      ['buckets'][0]['key'].split("::")
                    if entity == "labs":
                        entity_usage_dict['lab_name'] = str(entity_details[1])
                        entity_usage_dict['discipline_name'] = \
                          str(entity_details[2])
                        entity_usage_dict['institute_name'] = \
                          str(entity_details[3])
                        
                    elif entity == "institutes":
                        entity_usage_dict['institute_name'] = \
                          str(entity_details[1])

                    elif entity == "disciplines":
                        entity_usage_dict['discipline_name'] = \
                          str(entity_details[1])
                        entity_usage_dict['institute_name'] = \
                          str(entity_details[2])
                    else:
                        pass
                    entity_usage_dict['usage'] = entity_usage['doc_count']
                    usage_list.append(entity_usage_dict)
                current_app.logger.debug("Usage List = %s" % (usage_list))
                return jsonify(usage_list)

            else:
                current_app.logger.error("Error code = %s" % (res.status_code))
                abort(res.status_code)
        except Exception as e:
            current_app.logger.error("Exception error = %s" % str(e))
            abort(500, str(e))

    else:
        return "Method not allowed"
#+END_SRC 
*** Test Cases
#+NAME: test_get_openedx_lab_wise_usage
#+BEGIN_SRC python
class TestGetOpenedxLabWiseUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_openedx_lab_wise_usage(self):
	print "test_get_openedx_lab_wise_usage"

	headers = {'Content-Type': 'application/json'}
	response = self.client.get("/openedx/lab_wise_usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC


** Add usage analytics of labs running on openedx platform

   - Route/API to fetch analytics from Open edX.  OpenedX POSTs data
     to analytics server API. Data POSTed is in the url.  
   - IP address of the Client making the request is evaluated by
     Analytics server.
   - Analytics server further converts that data into JSON and sends POST it to
     Elasticsearch database.
   - Location of the Client is idenfied using an available opensource API 
     http://freegeoip.net/json/ 
**** TODO
     This API is badly implemented this is to be refactored. This is already
     integrated to 91 number labs in openedx hence not possible to break all
     such apis by refactoring it.
     
*** API Design
   :PROPERTIES:
   :CUSTOM_ID: openedx-usage
   :END:          

    - URL :: /server_url,user_id,lab_id,lab_name,exp_id,exp_name

    - Method :: GET

    - URL Params :: None

    - Success Response ::
      + Code: 200
      #+BEGIN_EXAMPLE
      {
      "status" : "success"
      }
      #+END_EXAMPLE

*** Implementation
#+NAME: add_openedx_usage_analytics
#+BEGIN_SRC python

@api.route('/<exp_details>',methods= ['GET'])
def add_openedx_usage_analytics(exp_details):
    if request.method == 'GET':
        exp_details = exp_details.split(",")
        data_dict = {}
        today = str(datetime.datetime.today()).split()[0]

        student_id = exp_details[0]
        lab_id = exp_details[1].lower()
        lab_name = exp_details[2]
        exp_id = exp_details[3].lower()
        exp_name = exp_details[4]

        data_dict["student_id"] = student_id
        data_dict["lab_id"] = lab_id
        data_dict["lab_name"] = lab_name

        data_dict["experiment_id"] = exp_id
        data_dict["experiment_name"] = exp_name

        LDS_API = "%s/labs?lab_id=%s" % (LDS_URL, lab_id)
        try:
            r = requests.get(LDS_API)

            if r.status_code == 200:
                lab_name = r.json()['lab_name']
                inst_id = r.json()['institute']['institute_id']
                inst_name = r.json()['institute']['institute_name']
                disc_name = r.json()['discipline']['discipline_name']
                disc_id = r.json()['discipline']['discipline_id']
                current_app.logger.debug("lab_name from LDS = %s" % (lab_name))
                data_dict["lab_name"] = lab_name
                data_dict["institute_id"] = inst_id
                data_dict["institute_name"] = inst_name
                data_dict["discipline_name"] = disc_name
                data_dict["discipline_id"] = disc_id
            else:
                current_app.logger.debug("Error in getting lab_name from LDS = %s" \
                                         % (lab_name))
        except Exception as e:
            abort(500, str(e))
            
        LDS_API = "%s/experiments?exp_id=%s" % (LDS_URL, exp_id)
        try:
            r = requests.get(LDS_API)
            if r.status_code == 200:
                exp_name = r.json()['exp_name']
                current_app.logger.debug("experiment_name from LDS = %s" % (exp_name))
                data_dict["experiment_name"] = exp_name
            else:
                current_app.logger.debug("Error in getting exp_name from LDS = %s" \
                                         % (exp_name))

            data_dict["date_of_experiment"] = today
            data_dict["time_of_experiment"] = time.strftime("%H:%M")
            data_dict["ip_address"] = request.environ.get('HTTP_X_REAL_IP',\
                                                          request.remote_addr)

            res = requests.get("http://freegeoip.net/json/" + \
                               data_dict["ip_address"])
            data = res.text
            ip_dir = ast.literal_eval(data)
            data_dict["region"] = ip_dir["region_name"]

            json_data = json.dumps(data_dict)
            headers = {'Content-Type': 'application/json'}
            index = VLABS_INDEX
            type = OPENEDX_USAGE
            ANALYTICS_DB_API = "%s/%s/%s" % (ANALYTICS_DB_URL, index, type)

            res = requests.post(ANALYTICS_DB_API, data=json_data, headers=headers)
            if res.status_code == 201:
                current_app.logger.debug("Added usage record = %s" % (json_data))
                return jsonify({"status" : "success" })
            else:
                current_app.logger.error\
                  ("Error in adding usage record = %s, staus_code = %s" % \
                       (json_data, res.status_code))
                return jsonify({"status" : "failed" })
            
        except Exception as e:
            abort(500, str(e))
    else:
        return "Method not allowed"
 #+END_SRC
*** Test Cases
#+NAME: test_post_analytics
#+BEGIN_SRC python
class TestPostAnalytics(TestCase):
    TESTING = True
    def create_app(self):
	app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_post_analytics(self):
	print "test_post_analytics"

	headers = {'Content-Type': 'application/json'}
	payload = {
        "lab_id" : "cse04",
        "lab_name" : "computer programming language"
        }
    response = self.client.post("/lab_name,lab_id", data=json.dumps(payload),
                                headers=headers)
    self.assertEqual(response.status_code, 200)

#+END_SRC


** Add lab wise usage analytics of labs on nonopenedx platform to database

   1. This API reads the records from the file =/root/nonopenedx-lab-usage-info.txt=
      which is being pushed from =stats.vlabs.ac.in= server for every =2hrs= of
      time interval
   2. Every record in file =nonopenedx-lab-usage-info.txt= has the following format
      #+BEGIN_EXAMPLE
      lab_id, lab_name, hists, visits, usage
      #+END_EXAMPLE
   3. From the each record it picks up the =lab_id= field and gets the details
      of that lab from [[http://lds.vlabs.ac.in/labs?lab_id=cse02][LDS]] service and then forms the =json= as below
      #+BEGIN_EXAMPLE
      {
          "lab_name" : "principles of programming languages",
          "lab_id" : "cse05",
          "discipline_name" : "Computer Science and Engineering",
          "discipline_id" : "cse"
          "institute_name" : "IIIT Hyderabad",
          "institute_id" : "iiith",
          "visits" : 4500,
          "hits" :4000 ,
          "usage" : 1000,
          "date" : 2017-07-25
       }
      #+END_EXAMPLE
   4. Every =json= record is pushed into =elasticsearch= database with index
      =vlabs= , type =nonopenedx_usage= and id =cse05_2017-07-25=
*** Design
  :PROPERTIES:
  :CUSTOM_ID: push_lab_wise_analytics
  :END:          

    - URL :: /nonopenedx/lab_wise_usage

    - Method :: POST

    - URL Params :: None
    
    - Payload JSON ::
        #+BEGIN_EXAMPLE
       {
          "lab_name" : "principles of programming languages",
          "lab_id" : "cse05",
          "discipline_name" : "Computer Science and Engineering",
          "discipline_id" : "cse",
          "institute_name" : "IIIT Hyderabad",
          "institute_id" : "iiith",
          "visits" : 4500,
          "hits" :4000 ,
          "usage" : 1000,
          "date" : 2017-07-25
       }

       #+END_EXAMPLE

    - Success Response ::
      + Code: 200
    
*** Implementation
#+NAME: add_nonopenedx_lab_wise_usage
#+BEGIN_SRC python
    if request.method == 'POST':
        current_date = str(datetime.datetime.today()).split()[0]
        file_path = NONOPENEDX_USAGE_INFO_FILE_PATH
        rows = []
        labs_count = 0
        with open(file_path, 'r') as f:
          lines = f.readlines()
          for line in lines:
             lab_info = {}
             row = line.split(",")
             if len(row)>0:
                 lab_info["lab_id"] = row[0]
                 lab_info["hits"] = int(row[3])
                 lab_info["visits"] = int(row[4])
                 lab_info["usage"] = int(row[5].strip())
                 lab_info["date"] = current_date
                 lab_id = lab_info['lab_id']
                 LDS_API = "%s/labs?lab_id=%s" % (LDS_URL, lab_id)
                 req = requests.get(LDS_API)
                 if req.status_code == 200:
                     lab_info["lab_name"] = str(req.json()["lab_name"])
                     lab_info["institute_name"] = str(req.json()["institute"]\
                                                    ["institute_name"])
                     lab_info["discipline_name"] = str(req.json()\
                                                       ["discipline"]\
                                                           ["discipline_name"])
                     lab_info['institute_id'] = str(req.json()['institute']\
                                                    ['institute_id'])

                     lab_info['discipline_id'] = str(req.json()['discipline']\
                                                     ['discipline_id'])

                     ANALYTICS_DB_API = "%s/%s/%s/id=%s_%s" % \
                       (ANALYTICS_DB_URL, index, type, lab_id, current_date)

                     req = requests.post(ANALYTICS_DB_API, auth=(USER, PASSWORD), data=json.dumps(lab_info))
                     if req.status_code == 200 or req.status_code == 201:
                         labs_count = labs_count + 1
                         current_app.logger.debug("Added record %s" % (lab_info))
                     else:
                         current_app.logger.error("Failed to add record %s" \
                                                  % (lab_info))
                 else:
                     current_app.logger.error\
                       ("Not found on LDS = %s, status_code = %s" \
                            % (lab_info, req.status_code))

             else:
                 break
        return_dict = {"records_added" : labs_count}
        current_app.logger.debug("Total records added to elastic database=%s" \
                                 % (return_dict))
        return jsonify(return_dict)

#+END_SRC

*** Test Cases


** Get lab wise usage analytics of labs running on non-openedx platform 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: lab_wise_analytics
  :END:          

    - URL :: /nonopenedx/lab_wise_usage

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
      #+BEGIN_EXAMPLE
      [
        {
          "lab_id": "ccnsb04",
          "hits": 30485,
          "discipline_name" : "Computer Science and Engineering",
          "discipline_id" : "cse",
          "institute_name" : "IIIT Hyderabad",
          "institute_id" : "iiith",
          "visits": 6430,
          "lab_name": "Quantum Chemistry",
          "usage": 473
        }
      ]
      #+END_EXAMPLE

*** Implementation

#+NAME: get_nonopenedx_lab_wise_usage
#+BEGIN_SRC python

#@api.route('/analytics/labs', methods=['POST', 'GET'])
@api.route('/nonopenedx/lab_wise_usage', methods=['POST', 'GET'])
#@api.cache.cached(timeout=360)
def nonopenedx_lab_wise_usage():
    index = VLABS_INDEX
    type = NONOPENEDX_USAGE
    
    if request.method == 'GET':
        if 'date' in request.args:
            current_date = request.args['date']
        else:
            current_date = str(datetime.datetime.today()).split()[0]

        total_labs = []
        ANALYTICS_DB_API = "%s/%s/%s/_search?q=date:%s&size=1000" % (ANALYTICS_DB_URL, index, type, current_date)
        try:
            req = requests.get(ANALYTICS_DB_API)
            if req.status_code == 200:
                labs = req.json()['hits']['hits']
                for lab in labs:
                    total_labs.append(lab['_source'])
                current_app.logger.debug("Total labs = %s" % (total_labs))
                return jsonify(total_labs)
            else:
                current_app.logger.error("error code = %s" % (req.status_code))
                abort(req.status_code)

        except Exception as e:
            abort(500, str(e))
#+END_SRC

*** Test Cases
#+NAME: test_get_nonopenedx_lab_wise_usage
#+BEGIN_SRC python
class TestgetNonOpenedxLabWiseUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_nonopenedx_lab_wise_usage(self):
	print "test_get_nonopenedx_lab_wise_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/nonopenedx/lab_wise_usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC
    

** Get total usage analytics of labs running on non-openedx platform
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_analytics
  :END:          

    - URL :: /nonopenedx/usage

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
      #+BEGIN_EXAMPLE
      {
        "date" : "2017-09-18",
        "hits": 40115823, 
        "usage": 593854, 
        "visits": 9704325
       }

      #+END_EXAMPLE

*** Implementation
    get the total visits from the =all_total.txt= file

#+NAME: get_nonopenedx_usage
#+BEGIN_SRC python

#app.cache = Cache(app)
#@api.route('/analytics', methods=['POST', 'GET'])
@api.route('/nonopenedx/usage', methods=['POST', 'GET'])
#@api.cache.cached(timeout=360)
def total_hits():
    index = VLABS_INDEX
    type = NONOPENEDX_USAGE
    
    if request.method == 'GET':
        if 'date' in request.args:
            current_date = request.args['date']
        else:
            current_date = str(datetime.datetime.today()).split()[0]

        ANALYTICS_DB_API = "%s/%s/%s/_search?q=date:%s&size=1000" % (ANALYTICS_DB_URL, index, type, current_date)
        req = requests.get(ANALYTICS_DB_API)
        if req.status_code == 200:
            labs = req.json()['hits']['hits']
            visits = 0
            hits = 0
            usage = 0
            if len(labs) != 0:
                for lab in labs:
                    visits = visits + int(lab['_source']['visits'])
                    hits = hits + int(lab['_source']['hits'])
                    usage = usage + int(lab['_source']['usage'])
                analytics_data = {"visits" : visits, "hits" : hits, "usage" : usage, "date" : current_date}
            else:
                analytics_data = {}

        return jsonify(analytics_data)
        
#+END_SRC

*** Test Cases
#+NAME: test_get_nonopenedx_usage
#+BEGIN_SRC python
class TestgetNonOpenedxUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_nonopenedx_usage(self):
	print "test_get_nonopenedx_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/nonopenedx/usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC




** Get total analytics of vlabs (openedx+nonopenedx)
   This API returns total usage of labs running on openedx (i.e 90) and non
   openedx labs
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_opendx_analytics
  :END:          

    - URL :: /vlabs/usage

    - Method :: GET

    - URL Params ::

    - Success Response ::
      + Code: 200
      #+BEGIN_EXAMPLE
      {
       "date" : "2017-09-18",
       "hits": 40115823, 
       "usage": 593854, 
       "visits": 9704325
      }

      #+END_EXAMPLE

*** Implementation
#+NAME: get_vlabs_usage
#+BEGIN_SRC python

#@api.route('/api/totalusage')
@api.route('/vlabs/usage')
def get_vlabs_usage():
    if request.method == 'GET':
        index = VLABS_INDEX
        openedx_usage_type = OPENEDX_USAGE
        nonopenedx_usage_type = NONOPENEDX_USAGE
        ANALYTICS_DB_API_FOR_EDX_USAGE = "%s/%s/%s/_count" % \
          (ANALYTICS_DB_URL, index, openedx_usage_type)
        ANALYTICS_DB_API_FOR_NONEDX_USAGE = "%s/%s/%s/_count" % \
          (ANALYTICS_DB_URL, index, nonopenedx_usage_type)

        try:
            headers = {'Content-Type': 'application/json'}
            r = requests.get(ANALYTICS_DB_API_FOR_EDX_USAGE, headers=headers)
            if r.status_code == 200:
                openedx_usage = r.json()['count']
                current_app.logger.debug\
                  ("open edx usage = %s" % (openedx_usage))

            else:
                current_app.logger.error\
                  ("Error in getting openedx usage, status_code = %s" % \
                       (r.status_code))
                       
            r = requests.get(ANALYTICS_DB_API_FOR_NONEDX_USAGE, headers=headers)
            if r.status_code == 200:
                nonopenedx_usage = r.json()['count']
                current_app.logger.debug\
                  ("nonopen edx usage = %s" % (nonopenedx_usage))
            else:
                current_app.logger.error\
                  ("Error in getting nonopenedx usage, status_code = %s" % \
                       (r.status_code))
                
            vlabs_usage = openedx_usage + nonopenedx_usage
            current_app.logger.debug("vlabs_usage =  %s" % (vlabs_usage))
            return jsonify({"usage" : vlabs_usage})
        except Exception as e:
            current_app.logger.debug("Exception error =  %s" % str(e))
            abort(500, str(e))
    
    else:
        return "Method not allowed"
#+END_SRC 
*** Test Cases
#+NAME: test_get_vlabs_usage
#+BEGIN_SRC python
class TestgetVlabsUsage(TestCase):
    TESTING = True
    def create_app(self):
    app = create_app(config)
	return app

    def setUp(self):
	pass

    def tearDown(self):
	pass

    def test_get_vlabs_usage(self):
	print "test_get_vlabs_usage"

	headers = {'Content-Type': 'application/json'}

	response = self.client.get("/vlabs/usage")
	self.assertEqual(response.status_code, 200)

#+END_SRC



** Get current logged in users vlabs.ac.in
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_user_in_op
  :END:    

  - URL :: /get_vlabs_user_analytics

  - Method :: GET

  - URL Params ::  date=<YYYY-MM-DD> (optional)

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
    #+BEGIN_EXAMPLE
    {
      "active_user_sessions": {
        "details": [
          {
            "client_location": {
              "langitude": 5.6615,
              "latitude": 51.6459
            },
            "clientip": "83.82.186.105",
            "count": 5
          }
        ],
        "total": 5
      },
      "active_users": 2,
      "date": "2017-09-14",
      "inactive_users": 1,
      "registered_users": 3
    }

    #+END_EXAMPLE

*** Implementation
#+NAME: get_logged_in_users
#+BEGIN_SRC python
def get_ip_info(ip_address, res):
    data = {}
    clients_info = res.json()['hits']['hits']

    for client_info in clients_info:
        if client_info['_source']['clientip'] == ip_address:

            data['clientip'] = ip_address
            data['client_location'] = {}

            try:
                data['client_location']['latitude'] = \
                  client_info['_source']['geoip']['latitude']
                data['client_location']['langitude'] = \
                  client_info['_source']['geoip']['longitude']
            except Exception as e:
                data['client_location']['latitude'] = ""
                data['client_location']['langitude'] = ""
    return data

@api.route('/get_vlabs_user_analytics', methods=['GET'])
def get_openedx_logged_in_users():

    if request.method == 'GET':
        current_date = str(datetime.datetime.today()).split()[0]
        headers = {'Content-Type': 'application/json'}
        data = {
            "aggs": {
                "client_ips": {
                    "terms": {
                        "field": "clientip",
                        "order" : { "_count" : "asc" },
                        "size": 0
                        },

                "aggs": {
                    "client_status": {
                        "terms": {
                            "script": "[doc.clientip.value, doc.api_endpoint.value].join('::')"
                            }

                        }
                    }
                }
            }
        }
        index = VLABS_INDEX
        type = "openedx_user_session_analytics_%s" % (current_date)

        ANALYTICS_DB_API = "%s/%s/%s/_search?size=10000" % \
          (ANALYTICS_DB_URL, index, type)
        current_app.logger.debug("analytics_db_api =%s" % (ANALYTICS_DB_API))
        openedx_user_analytics = {}
        total_active_user_sessions = 0

        try:
            res = requests.post(ANALYTICS_DB_API, auth=(USER, PASSWORD), data=json.dumps(data), \
                                headers=headers)
            if res.status_code == 200 or res.status_code == 201:
                clients_ip_info = res.json()\
                  ['aggregations']['client_ips']['buckets']
                active_user_details = []
                for client_action in clients_ip_info:

                    if len(client_action['client_status']['buckets']) == 1:
                        geo_codes_info = get_ip_info(client_action['key'], res)
                        login_end_point = client_action['client_status']\
                          ['buckets'][0]['key'].split("::")[1]
                        if login_end_point == "/dashboard":
                            active_user_sessions_count = client_action['doc_count']
                        else:
                            active_user_sessions_count = 0
                        geo_codes_info['count'] = int(active_user_sessions_count)
                        total_active_user_sessions = total_active_user_sessions + \
                          geo_codes_info['count']

                    elif len(client_action['client_status']['buckets']) == 2:
                        geo_codes_info = get_ip_info(client_action['key'], res)
                        login_end_point = client_action['client_status']\
                          ['buckets'][0]['key'].split("::")[1]
                        logout_end_point = client_action['client_status']\
                          ['buckets'][1]['key'].split("::")[1]
                          
                        if login_end_point == "/dashboard":
                            login_count = int(client_action['client_status']\
                                              ['buckets'][0]['doc_count'])
                        else:
                            login_count = 0
                        if logout_end_point == "/logout":
                            logout_count = int(client_action['client_status']\
                                               ['buckets'][1]['doc_count'])
                        else:
                            logout_count = 0
                        active_user_sessions_count = login_count - logout_count
                        current_app.logger.debug("active user count = %s" % \
                                                 (active_user_sessions_count))
                        if active_user_sessions_count > 0:
                            geo_codes_info['count'] = int(active_user_sessions_count)
                            total_active_user_sessions = \
                              total_active_user_sessions + \
                              geo_codes_info['count']
                        if active_user_sessions_count == 0:
                            geo_codes_info['count'] = 0
                    else:
                        pass
                    active_user_details.append(geo_codes_info)
                openedx_user_analytics['active_user_sessions'] = {}
                openedx_user_analytics['date'] = current_date
                openedx_user_analytics['active_user_sessions']['details'] = \
                  active_user_details
                openedx_user_analytics['active_user_sessions']['total'] = \
                  total_active_user_sessions
                current_app.logger.debug("openedx_user_analytics =%s" % \
                    (openedx_user_analytics))
                    
                type = "openedx_user_analytics"
                ANALYTICS_DB_API = "%s/%s/%s/%s" % (ANALYTICS_DB_URL, index, type, current_date)
                
                r = requests.get(ANALYTICS_DB_API, headers=headers)
                if r.status_code == 200:
                    analytics_data = r.json()['_source']
                    openedx_user_analytics['registered_users'] = \
                      analytics_data['registered_users']
                    openedx_user_analytics['active_users'] = \
                      analytics_data['active_users']
                    openedx_user_analytics['inactive_users'] = \
                      analytics_data['inactive_users']
                else:
                    current_app.logger.error\
                      ("Error in getting openedx user analytics")
                return jsonify(openedx_user_analytics)

            else:
                abort(res.status_code)
        except Exception as e:
            abort(500, str(e))
    else:
        return "Method is not allowed"

#+END_SRC 

*** Test Cases





** Get current logged in users and total registered users in outreach portal
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: get_total_user_in_op
  :END:    

  - URL :: /get_outreach_user_analytics

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
    #+BEGIN_EXAMPLE
    {
    "current_logged_in_users" : 20,
    "total_registered_users"" : 1000,
    "date" : "2017-08-25"
    }
    #+END_EXAMPLE

*** Implementation
*** Test Cases


** Get total offline/online feedbacks
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_feedbacks
  :END:    

  - URL :: /get_feedbacks

  - Method :: GET

  - URL Params ::  
     + ?version=offline/online&date=dd-mm-yyyy
     + ?version=offilne/online&date=dd-mm-yyyy&mac_addr=<mac_id>
  - Payload :: None

  - Success Response ::
    + Status_Code: 200
    + Content:                 
    #+BEGIN_EXAMPLE
    {
    "total_feedbacks" : 30 
    }
    #+END_EXAMPLE
*** Implementation
*** Test Cases

    
** Get all feedbacks =from= and =to= date
*** API Design

  :PROPERTIES:
  :CUSTOM_ID: get_all_feedback_forms_for_a_date
  :END:          

    - URL :: /get_feedbakcs

    - Method :: GET

    - URL Params ::
      Required : from_date=[string]
                 to_date=[string]
      the format of the string is in 'dd-mm-yyyy' format

    - Success Response ::
      + Code: 200
    #+BEGIN_EXAMPLE
    {
    "from_date" : "2015-08-20",
    "to_date" : "2017-09-18",
    "total_feedbacks" : 1000
    }
    #+END_EXAMPLE

*** Implementation
*** Test Cases
   
   


* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-

import os
import json
import time
import datetime
import os
import datetime
from runtime.config.system_config import *
from runtime.config.flask_app_config import *
from flask import send_from_directory, current_app, abort
from flask import request, Blueprint, make_response, jsonify
#from elasticsearch import Elasticsearch
import requests
import ast
api = Blueprint('APIs', __name__)

#+end_src



* Tangle                                                        :boilerplate:

** sources

 #+BEGIN_SRC python :tangle api.py :eval no :noweb yes

<<imports_for_sources>>
<<get_analytics>>
<<get_openedx_usage>>
<<add_openedx_usage_analytics>>
<<get_openedx_lab_wise_usage>>
<<get_nonopenedx_usage>>
<<add_nonopenedx_lab_wise_usage>>
<<get_nonopenedx_lab_wise_usage>>
<<get_vlabs_usage>>
<<get_logged_in_users>>
#+END_SRC

#+BEGIN_SRC conf :tangle openedx-logged-in-users.conf :eval no :noweb yes

#<<logged_in_users>>

#+END_SRC


