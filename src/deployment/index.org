#+TITLE: Deploying the application on a server
#+AUTHOR: VLEAD
#+DATE: [2017-09-12 Tue]
#+SETUPFILE: ../org-templates/level-1.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  This document illustrate the steps to configure & install the dependencies
  required for running the application


* Install dependendent python packages
  Here we use the =setuptools= module from the standard lib, to make a
  =setup.py= file, which installs all the python library dependencies required
  to run the application.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask',
    'flask-cors',
    'flask-testing',
    'requests',
    'pyyaml',
    'GitPython',
    'gunicorn'
]

setup(
    name='vlabs-analytics-service',
    version='1.0',
    install_requires=requires
)

#+END_SRC


* WSGI configuration
 - The Web Server Gateway Interface (WSGI) is a specification for simple and
   universal interface between web servers and web applications or frameworks
   for the Python programming language.
 - This application runs behind =nginx= webserver.
 - Following code snippet in =wsgi.py= makes the connection between =nginx= and
   =flask= python's micro framework.
#+BEGIN_SRC python :tangle wsgi.py :eval no

import sys, os

sys.path.insert(0, "/usr/share/nginx/html/")
from runtime.rest.app import create_app
from runtime.config import flask_app_config as config

application = create_app(config)

#+END_SRC


* Make analytics as service
  Following snippet
#+BEGIN_SRC python :tangle analytics-service.conf :eval no

description "Gunicorn application server runninng anlytics-service"

start on runlevel [2345]
stop on runlevel [!2345]

respawn
setuid root
setgid www-data

chdir /usr/share/nginx/html/deployment
exec gunicorn --workers 3 --bind unix:ci-service.sock -m 007 wsgi

#+END_SRC


* Nginx socket configuration

#+BEGIN_SRC python :tangle analytics-service :eval no

server {
    listen 80;
    server_name localhost;

    location / {
        include proxy_params;
        proxy_pass http://unix:/usr/share/nginx/html/deployment/analytics-service.sock;
    }
}

#+END_SRC


* Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts.

#+BEGIN_SRC sh :tangle configure.sh :eval no
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

update_app_config () {
  #CONFIG_FILE="../runtime/config/flask_app_config.py"

  # the list of white-listed IPs for POST/PUT requests to data service
  WHITELIST_IPS="['127.0.0.1']"

  # the list of allowed domains for CORS
  ALLOWED_ORIGINS="['*']"

  echo "Updating config.py.."
  # Update parts of the DB URI
  # update WHITELIST_IPS
  #sed -i "s/^WHITELIST_IPS.*$/WHITELIST_IPS = $WHITELIST_IPS/" $CONFIG_FILE
  # update ALLOWED_ORIGINS
  #sed -i "s/^ALLOWED_ORIGINS.*$/ALLOWED_ORIGINS = $ALLOWED_ORIGINS/" $CONFIG_FILE

  # NOTE: this is hardcoded now..somehow the log file when dynamically created
  # is owned by root. then the app fails to run.. hence the following is
  # necessary
}

update_apache_config() {
  PROC_NAME="analytics"
  WSGI_SCRIPT="analytics.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/default"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

  #sed -i '/<\/VirtualHost>/i \
  #  WSGIDaemonProcess $PROC_NAME user=www-data group=www-data threads=5
  #  WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT

  #  <Directory $ABS_PATH_DS>
  #    WSGIProcessGroup $PROC_NAME
  #    WSGIApplicationGroup %{GLOBAL}
  #    Order deny,allow
  #    Allow from all
  #  </Directory>
  #' $APACHE_VHOST_FILE

}

update_app_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update application flask_app_config.py"
  exit 1;
fi
update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart
export PYTHONPATH="/var/www"
exit 0;

#+END_SRC


* Script to sanitize openedx analytics data
#+BEGIN_SRC python :tangle sanitize_openedx_analytics.py :eval no

import requests
import json

ELASTIC_URL = "http://192.168.33.10"
GET_INDEXS_API = "%s/_cat/indices" % (ELASTIC_URL)
#r = requests.get(GET_INDEXS_API)

#indexes = r.json()


file_names = []
def backup():
    indexes = ['vlabs' , 'college_cloud' , 'college_cloud', 'matrusri-college_70:54:d2:7b:3d:70', 'juit_70:54:d2:7b:3d:36']
    for index_name in indexes:
        #index_name = index[index]
        GET_TYPES_API = "%s/%s" % (ELASTIC_URL, index_name)
        r = requests.get(GET_TYPES_API)
        types = r.json()[index_name]['mappings'].keys()
        for t in types:
            temp = []
            GET_DOCS_API = "%s/%s/%s/_search" % (ELASTIC_URL, index_name, str(t))
            r = requests.get(GET_DOCS_API)
            docs = r.json()['hits']['hits']

            for doc in docs:
                temp.append(doc['_source'])
            file_name = "%s_%s.json" % (index_name, str(t))
            file_names.append(file_name)
            f = open(file_name, 'w')
            json.dump(temp, f)
            f.close()

def restore():

    for file_name in file_names:
        if file_name == "vlabs_usage.json":
            index = "vlabs"
            type = "openedx-usage"
            with open(file_name) as data_file:
                usages = json.load(data_file)
            for usage in usages:

        if file_name == "vlabs_usage.json":
            print "dfd"

        if file_name == "matrusri-college_70:54:d2:7b:3d:70_usages.json":
            print "Dfd"

        if file_name == "matrusri-college_70:54:d2:7b:3d:70_feedback.json":
            print "Dfd"

        if file_name == "college_cloud_details.json":
            print "Dfd"

        if file_name == "juit_70:54:d2:7b:3d:36_feedback.json";
            print "Dfd"
        if file_name == "juit_70:54:d2:7b:3d:36_usages.json":
            print "dfd"

#+END_SRC


* Setup logstash service
** Installation 
*** Pre requisites =java= version =8=    
    =java= version =8= is the pre-requisite to install =elasticsearch=
    #+BEGIN_EXAMPLE
    sudo apt-add-repository ppa:webupd8team/java -y
    sudo apt-get update -y
    echo 'oracle-java8-installer shared/accepted-oracle-license-v1-1 select true' | sudo debconf-set-selections
    sudo apt-get install oracle-java8-installer -y
    #+END_EXAMPLE
*** Install logstash
    Download and install the Public Signing Key:
    #+BEGIN_EXAMPLE
    wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    #+END_EXAMPLE
    You may need to install the apt-transport-https package on Debian before
    proceeding:
    #+BEGIN_EXAMPLE
    sudo apt-get install apt-transport-https
    #+END_EXAMPLE
    Run sudo apt-get update and the repository is ready for use. You can install
    it with:
    #+BEGIN_EXAMPLE
    sudo apt-get update && sudo apt-get install logstash
    #+END_EXAMPLE
*** Run logstash  
    To run =logstash= service
    #+BEGIN_EXAMPLE
    service logstash start
    #+END_EXAMPLE
** Configuration file 
   - Configuration to dump the =login= and =logout= =nginx= server logs into
     the =elasticsearch= service
     #+NAME: logged_in_users
     #+BEGIN_SRC conf
     input {
        file {
            path => "/home/sripathi/test-logs.log"
            start_position => "beginning"
        }

     }        

     filter {

           grok {
                 match => ["message", "%{IP:clientip} \- \- \[%{MONTHDAY:day}/%{MONTH:month}/%{YEAR:year}\:%{TIME:time} \+%{INT:zone}\]  \"%{WORD:method} %{URIPATHPARAM:api_endpoint} %{URIPROTO:protocal}/%{NUMBER:version}\" %{INT:status_code} %{INT:byte} %{NUMBER:byte1} \"%{URI:referrer}"]

                }
                geoip {
                source => "clientip"
                }
            if [month] == "Jan" {
             mutate { replace => { "month" => "01" } } 
            }
            else if [month] == "Feb" {
             mutate { replace => { "month" => "02" } } 
            }
            else if [month] == "Mar" {
             mutate { replace => { "month" => "03" } } 
            }
            else if [month] == "Apr" {
             mutate { replace => { "month" => "04" } } 
            }
            else if [month] == "May" {
             mutate { replace => { "month" => "05" } } 
            }
            else if [month] == "Jun" {
             mutate { replace => { "month" => "06" } } 
            }
            else if [month] == "Jul" {
             mutate { replace => { "month" => "07" } } 
            }
            else if [month] == "Aug" {
             mutate { replace => { "month" => "08" } } 
            }
            else if [month] == "Sep" {
             mutate { replace => { "month" => "09" } } 
            }
            else if [month] == "Oct" {
             mutate { replace => { "month" => "10" } } 
            }    
            else if [month] == "Nov" {
             mutate { replace => { "month" => "11" } } 
            }
            else {
             mutate { replace => { "month" => "12" } } 
            }    
            mutate {

              add_field => {
                            "date" => "%{year}-%{month}-%{day}"
                            }
              remove_field => ["year", "month", "day", "path", "host"]
             }
           if [api_endpoint] == "/dashboard" {

                 if [status_code] != "200" {
                    drop {}
                 }
                 else if [referrer] != "https://vlabs.ac.in/login?next=/dashboard" {
                      drop {}
                 }
           }
           else if [api_endpoint] == "/logout" {
               if [status_code] != "302" or [referrer] == "https://vlabs.ac.in/" {
                  drop {}
               }

           }
           else {
                drop {}
           }

     }

     output {

            elasticsearch {
                 #protocol => "http"
                 hosts => "192.168.33.3:80"
                 user => "sripathi"
                 password => "sudswathi"
                 index => "vlabs"
                 document_type => "user_analytics_%{date}"
             }
        }

     #+END_SRC
     

* Tangle                                       :boilerplate:
#+BEGIN_SRC python :eval no :tangle __init__.py
print "deployment package"
#+END_SRC

#+BEGIN_SRC conf :tangle openedx-logged-in-users.conf :eval no :noweb yes

<<logged_in_users>>

#+END_SRC
